# Let T be an n-node binary tree that may be improper. Describe how to represent T by means of a proper binary tree T' with O(n) nodes.

# In a binary tree, h+1 <= n <= 2^h+1-1, while in a proper binary tree, 2h+1 <= n <= 2^(h+1)-1. So the largest nodes difference between a imporper binary tree and a proper binary tree can be: (2^(h+1)-1)-(h+1) = 2^(h+1)-1-h-1 = 2^(h+1)-h-2. h represents the height of the tree, and log(n+1)-1 <= h <= (n-1)/2. If h == log(n+1)-1, then 2^(h+1)-h-2 = 2^(log(n+1)-1+1)-h-2 = 2^(log(n+1))-log(n+1)+1-2 = n+1-log(n+1)-1 = n-log(n+1). This is in the range of O(n). If h == (n-1)/2, then 2^(h+1)-h-2 = 2^((n-1)/2+1)-(n-1)/2-2 = 2^(n/2+1/2)-n/2+1/2-2 = 2^((n+1)/2)-n/2-3/2 = sqrt(2)^(n+1)-(n+3)/2 = sqrt(2)^n*sqrt(2)^1-(n+3)/2 = (sqrt(2))^2*sqrt(2)^(n-1)-(n+3)/2 = 2*sqrt(2)^(n-1)-(n+3)/2. To let this within the range of O(n), 2*sqrt(2)^(n-1) should be linear to n. 2*sqrt(2)^(n-1)/n = c (c as a constant). Let sqrt(2) == a, so it becomes 2*(a^(n-1))/n = c. To avoid exponential growth, we let c <= n. So 2*(a^(n-1))/n <= n. Based on the plot in Excel, when n > 16, this formula breaks down. In conclusion, if n <= 16, then any improper tree T can be represented by a proper tree T' with the missing nodes added as None and can be kept with O(n) nodes. If n > 16, it depends on the tree height. Single branch definitely cannot be represented by proper binary tree T' with O(n) nodes, while tree T with less levels (h is smaller) can. 
