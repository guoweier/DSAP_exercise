# Let T be a (not neccessarity proper) binary tree with n nodes, and let D be the sum of the depths of all the external nodes of T. Show that if T has the minimum number of external nodes possble, then D is O(n) and if T has the maximum number of external nodes possible, then D is O(nlogn).

# if T has the minimum number of external nodes, then T would have one branch, with n nodes structured into a linear line, and there is only 1 external node, which is the last one at the bottom. In this case, the only external node's deoth is n-1 (since the root is 0). So to calculate D, it needs to navigate along the linear branch to find out the external node, which takes O(n) time. So D is O(n).
# If T has the maximum number of external nodes, since T is a binary tree, then T would be as proper as possible. Every node would try to get 2 children as it can. Since 1<=nE<=2^h (h as the height of T), so the maximum nE would be 2^h. then the h=log2(nE). And every external node needs to have log2(nE) time for calculate D, so nE external nodes would need nElog2(nE) time for calculation. So D is O(nlogn). 
